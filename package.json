{
  "name": "project",
  "version": "1.0.0",
  "type": "module",
  "description": "```\r ┌─────────────────────────────────────────────────────────────────────┐\r │                         FRONTEND (React)                            │\r │  ┌──────────────────┐               ┌──────────────────┐            │\r │  │  WebSocket       │               │  SSE (Alt)       │            │\r │  │  Client          │               │  Client          │            │\r │  └────────┬─────────┘               └────────┬─────────┘            │\r │           │                                  │                      │\r └───────────┼──────────────────────────────────┼──────────────────────┘\r             │                                  │\r             │ ws://localhost:8080/ws/chat      │ POST /api/chat/stream\r             │                                  │\r ┌───────────▼──────────────────────────────────▼──────────────────────┐\r │              SPRING BOOT WEBFLUX GATEWAY (Port 8080)                │\r │  ┌─────────────────────────────────────────────────────────────┐    │\r │  │  WebSocket Handler          │  REST Controller (SSE)        │    │\r │  │  - Receive messages         │  - HTTP SSE endpoint          │    │\r │  │  - Stream to client         │  - Alternative to WebSocket   │    │\r │  └──────────────────┬──────────┴───────────┬───────────────────┘    │\r │                     │                      │                        │\r │                     └───────────┬──────────┘                        │\r │                                 │                                   │\r │                     ┌───────────▼───────────┐                       │\r │                     │   ChatService         │                       │\r │                     │   (WebFlux)           │                       │\r │                     │   - Call LangChain    │                       │\r │                     │   - Handle streaming  │                       │\r │                     └───────────┬───────────┘                       │\r └─────────────────────────────────┼───────────────────────────────────┘\r                                   │\r                                   │ HTTP POST\r                                   │ /chat (streaming)\r                                   │\r ┌─────────────────────────────────▼───────────────────────────────────┐\r │         LANGCHAIN STREAMING SERVICE (Python - Port 8001)            │\r │  ┌──────────────────────────────────────────────────────────────┐   │\r │  │  1. Receive question                                         │   │\r │  │  2. Call Haystack for document retrieval                     │   │\r │  │  3. Stream AI response via LangChain                         │   │\r │  └──────────────┬────────────────────────────┬──────────────────┘   │\r │                 │                            │                      │\r │                 │ POST /retrieve             │ Stream to OpenRouter │\r │                 │                            │                      │\r └─────────────────┼────────────────────────────┼──────────────────────┘\r                   │                            │\r      ┌────────────▼────────────┐  ┌────────────▼──────────────┐\r      │  HAYSTACK RAG SERVICE   │  │  OpenRouter API           │\r      │  (Python - Port 8000)   │  │  (GPT-3.5-turbo)          │\r      │                         │  └───────────────────────────┘\r      │  - Query reformulation  │\r      │  - Document retrieval   │\r      │  - Ranking              │\r      └────────┬────────────────┘\r               │\r               │ Query documents\r               │\r      ┌────────▼────────────┐\r      │  OpenSearch         │\r      │  (Vector DB)        │\r      │  - Document storage │\r      │  - Hybrid search    │\r      └─────────────────────┘\r ```",
  "main": "router.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^5.1.0",
    "http-proxy-middleware": "^3.0.5",
    "ws": "^8.18.3"
  }
}
