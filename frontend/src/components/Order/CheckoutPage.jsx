import React, { useState, useMemo } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { ArrowLeftIcon } from '../ShoppingCart/Icons';
import AddressSection from './AddressSection';
import ProductList from './ProductList';
import ShippingMethod from './ShippingMethod';
import PaymentMethod from './PaymentMethod';
import OrderSummary from './OrderSummary';
import '../../assets/styles/components/Order/CheckoutPage.css';

const CheckoutPage = () => {
    const location = useLocation();
    const navigate = useNavigate();

    const { items: incomingItems = [] } = location.state || {};

    const [selectedAddress, setSelectedAddress] = useState({
        id: 1,
        name: "Nguy·ªÖn VƒÉn A",
        phone: "0123456789",
        address: "123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ",
        city: "H√† N·ªôi",
        isDefault: true
    });

    const [orderItems, setOrderItems] = useState(() => {
        if (incomingItems.length > 0) {
            return incomingItems;
        }
        return [
            {
                id: 1,
                name: "√Åo Thun Nam Cotton Premium",
                size: "L",
                color: "ƒêen",
                url: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=400&fit=crop&crop=center",
                brand: "Coolmate",
                quantity: 2,
                priceAtAdd: 199000
            },
            {
                id: 2,
                name: "Qu·∫ßn Jeans Slim Fit",
                size: "32",
                color: "Xanh ƒë·∫≠m",
                url: "https://images.unsplash.com/photo-1542272604-787c3835535d?w=400&h=400&fit=crop&crop=center",
                brand: "Levi's",
                quantity: 1,
                priceAtAdd: 899000
            }
        ];
    });

    const [selectedShipping, setSelectedShipping] = useState('standard');
    const [selectedPayment, setSelectedPayment] = useState('cod');

    const shippingMethods = [
        {
            id: 'standard',
            name: 'Giao h√†ng ti√™u chu·∫©n',
            time: '3-5 ng√†y',
            priceAtAdd: 30000,
            description: 'Giao h√†ng trong gi·ªù h√†nh ch√≠nh'
        },
        {
            id: 'express',
            name: 'Giao h√†ng nhanh',
            time: '1-2 ng√†y',
            priceAtAdd: 50000,
            description: 'Giao h√†ng ∆∞u ti√™n, nhanh ch√≥ng'
        },
        {
            id: 'super_express',
            name: 'Giao h√†ng h·ªèa t·ªëc',
            time: '2-4 gi·ªù',
            priceAtAdd: 100000,
            description: 'Giao h√†ng trong ng√†y (n·ªôi th√†nh)'
        }
    ];

    const paymentMethods = [
        {
            id: 'cod',
            name: 'Thanh to√°n khi nh·∫≠n h√†ng (COD)',
            description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng',
            icon: 'üíµ'
        },
        {
            id: 'bank_transfer',
            name: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
            description: 'Chuy·ªÉn kho·∫£n qua ATM/Internet Banking',
            icon: 'üè¶'
        },
        {
            id: 'credit_card',
            name: 'Th·∫ª t√≠n d·ª•ng/Ghi n·ª£',
            description: 'Visa, Mastercard, JCB',
            icon: 'üí≥'
        },
        {
            id: 'e_wallet',
            name: 'V√≠ ƒëi·ªán t·ª≠',
            description: 'MoMo, ZaloPay, VNPay',
            icon: 'üì±'
        }
    ];

    const handlePlaceOrder = () => {
        alert('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
    };

    const subtotal = useMemo(
        () => orderItems.reduce((sum, item) => sum + item.priceAtAdd * item.quantity, 0),
        [orderItems]
    );
    const shippingFee = shippingMethods.find(m => m.id === selectedShipping)?.priceAtAdd || 0;
    const total = subtotal + shippingFee;

    if (incomingItems.length === 0 && orderItems.length === 0) {
        return (
            <div className="checkout-page">
                <p>Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.</p>
                <button onClick={() => navigate('/cart')}>Quay l·∫°i gi·ªè h√†ng</button>
            </div>
        );
    }

    return (
        <div className="checkout-page">
            <div className="checkout-container">
                <div className="checkout-header" >
                    <p>
                        <h1>Thanh to√°n ƒë∆°n h√†ng</h1>
                        <p>Vui l√≤ng ki·ªÉm tra th√¥ng tin tr∆∞·ªõc khi ƒë·∫∑t h√†ng</p>
                    </p>
                    <button onClick={() => navigate('/cart')} className="continue-shopping-btn">
                        <ArrowLeftIcon />
                        Quay l·∫°i gi·ªè h√†ng
                    </button>
                </div>

                <div className="checkout-grid">
                    <div className="checkout-left">
                        <AddressSection 
                            selectedAddress={selectedAddress}
                            onChangeAddress={() => alert('M·ªü modal ch·ªçn ƒë·ªãa ch·ªâ')}
                        />

                        <ProductList items={orderItems} />

                        <ShippingMethod
                            methods={shippingMethods}
                            selected={selectedShipping}
                            onSelect={setSelectedShipping}
                        />

                        <PaymentMethod
                            methods={paymentMethods}
                            selected={selectedPayment}
                            onSelect={setSelectedPayment}
                        />
                    </div>

                    <div className="checkout-right">
                        <OrderSummary
                            subtotal={subtotal}
                            shippingFee={shippingFee}
                            total={total}
                            itemCount={orderItems.length}
                            onPlaceOrder={handlePlaceOrder}
                        />
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CheckoutPage;